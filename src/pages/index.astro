---
import Layout from "../layouts/Layout.astro";
---

<Layout title="ox-games">
  <div class="wrapper">
    <div class="game">
      <h2 class="section-title">
        <span class="red">o</span><span class="blue">x</span>-Game
      </h2>
      <h3 class="turn">
        <div class="flex">
          <div class="turn-turn">turn：</div>
          <div class="turn-text">o</div>
        </div>
        <img
          class="reset hidden"
          src="/ox-games/assets/reset-button.jpg"
          alt="reset"
        />
        <img
          class="return"
          src="/ox-games/assets/return-button.png"
          alt="return"
        />
      </h3>
      <div class="game-board">
        <div class="flex">
          <p class="frame top left"><span class="symbol"></span></p>
          <p class="frame top"><span class="symbol"></span></p>
          <p class="frame top"><span class="symbol"></span></p>
          <p class="frame top"><span class="symbol"></span></p>
          <p class="frame top right"><span class="symbol"></span></p>
        </div>
        <div class="flex">
          <p class="frame left"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame right"><span class="symbol"></span></p>
        </div>
        <div class="flex">
          <p class="frame left"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame right"><span class="symbol"></span></p>
        </div>
        <div class="flex">
          <p class="frame left"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame"><span class="symbol"></span></p>
          <p class="frame right"><span class="symbol"></span></p>
        </div>
        <div class="flex">
          <p class="frame bottom left"><span class="symbol"></span></p>
          <p class="frame bottom"><span class="symbol"></span></p>
          <p class="frame bottom"><span class="symbol"></span></p>
          <p class="frame bottom"><span class="symbol"></span></p>
          <p class="frame bottom right"><span class="symbol"></span></p>
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* common
--------------- */
  * {
    padding: 0;
    margin: 0;
  }

  html {
    font-size: 100%;
  }

  body {
    background-color: #f8fdfd;
  }

  img {
    width: 100%;
  }

  .wrapper {
    max-width: 100vw;
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: auto;
  }

  /* game
--------------- */
  .game .section-title {
    font-size: 3.5rem;
    text-align: center;
  }

  .game .turn {
    font-size: 1.5rem;
    margin-bottom: 15px;
    position: relative;
  }

  .game .flex {
    display: flex;
    justify-content: center;
  }

  .game .turn .turn-turn {
    display: flex;
    align-items: center;
    width: 80px;
    height: 60px;
  }

  .game .turn .turn-text {
    font-size: 2.5rem;
  }

  .game .turn .reset,
  .game .turn .return {
    position: absolute;
    top: 8px;
    right: 20px;
    width: 30px;
    height: 25px;
    background-color: #dedede;
    padding: 8px;
    border: solid 3px #dedede;
    border-radius: 10px;
    transition: all 0.5s;
  }

  .game .turn .reset:hover,
  .game .turn .return:hover {
    opacity: 0.8;
  }

  .game .turn .reset:active,
  .game .turn .return:active {
    background-color: #ffb266;
  }

  .hidden {
    display: none;
  }

  /* game-board */
  .game-board .flex {
    display: flex;
  }

  .game-board .flex .frame {
    width: 90px;
    height: 90px;
    border: solid 1px #000;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 1s;
  }

  .game-board .flex .frame .symbol {
    font-size: 4rem;
  }

  .red {
    color: #f77c7c;
  }

  .blue {
    color: #7c7cf7;
  }

  .grey {
    background-color: #dedede;
  }

  .game-board .flex .top {
    border-top: none;
  }

  .game-board .flex .left {
    border-left: none;
  }

  .game-board .flex .right {
    border-right: none;
  }

  .game-board .flex .bottom {
    border-bottom: none;
  }

  /*  */
  @media (max-width: 510px) {
    .game-board .flex .frame {
      width: 75px;
      height: 75px;
    }

    .game-board .flex .frame .symbol {
      font-size: 3rem;
    }
  }

  @media (max-width: 425px) {
    .game-board .flex .frame {
      width: 55px;
      height: 55px;
    }
  }
</style>

<script>
  const frame = document.querySelectorAll(".frame");
  const symbol = document.querySelectorAll(".symbol");
  const reset_button = document.querySelector(".reset");
  const return_botton = document.querySelector(".return");
  const turn = document.querySelector(".turn-turn");
  const turn_text = document.querySelector(".turn-text");

  let click_count = 0;
  const max_click = 25;

  const ok_return = 1;
  const no_return = 0;
  let return_count = no_return;

  const win = 1;
  const lose = 0;
  let Winning_judgment = lose;

  const circle = 1;
  const cross = 2;
  let now_player;

  // 本番のgame-board
  let game_board = [
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
  ];
  // return時のgame-board
  let game_board_return = [
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0],
  ];
  // 勝利の時の配列・28パターン
  const winner_judge_coordinate = [
    [0, 1, 2, 3],
    [1, 2, 3, 4],
    [5, 6, 7, 8],
    [6, 7, 8, 9],
    [10, 11, 12, 13],
    [11, 12, 13, 14],
    [15, 16, 17, 18],
    [16, 17, 18, 19],
    [20, 21, 22, 23],
    [21, 22, 23, 24],
    [0, 5, 10, 15],
    [5, 10, 15, 20],
    [1, 6, 11, 16],
    [6, 11, 16, 21],
    [2, 7, 12, 17],
    [7, 12, 17, 22],
    [3, 8, 13, 18],
    [8, 13, 18, 23],
    [4, 9, 14, 19],
    [9, 14, 19, 24],
    [0, 6, 12, 18],
    [6, 12, 18, 24],
    [4, 8, 12, 16],
    [8, 12, 16, 20],
    [1, 7, 13, 19],
    [5, 11, 17, 23],
    [3, 7, 11, 15],
    [9, 13, 17, 21],
  ];

  window.onload = function () {
    for (var i = 0; i < frame.length; i++) {
      frame[i].setAttribute("date-value", String(i));
    }

    // 先行・後攻を決める
    first_player_decision();
  };

  function first_player_decision() {
    now_player = Math.floor(Math.random() * 2) + 1;
    turn_text_change();
  }

  function turn_text_change() {
    turn_text.classList.remove("red");
    turn_text.classList.remove("blue");
    if (now_player == circle) {
      turn_text.textContent = "o";
      turn_text.classList.add("red");
    } else if (now_player == cross) {
      turn_text.textContent = "x";
      turn_text.classList.add("blue");
    }
  }

  // oxのclickイベント(盤面にoxを表示する)
  for (const frame_list of frame) {
    frame_list.addEventListener("click", function () {
      let board_number_now = frame_list.getAttribute("date-value");
      let line = Math.floor(Number(board_number_now) / 5);
      let row = Number(board_number_now) % 5;

      // 盤面の変更
      game_board_change(line, row);
    });
  }

  // returnのclickイベント
  return_botton.addEventListener("click", function () {
    if (return_count == ok_return) {
      return_game_board_indication();
      click_count -= 1;
      player_change();
      return_count = no_return;
    }
  });

  function return_game_board_indication() {
    for (var i = 0; i < 5; i++) {
      for (var j = 0; j < 5; j++) {
        let total = i * 5 + j;
        game_board[i][j] = game_board_return[i][j];
        symbol[total].textContent = "";
        symbol_color_reset(total);
        if (game_board_return[i][j] == circle) {
          symbol[total].textContent = "o";
          symbol[total].classList.add("red");
        } else if (game_board_return[i][j] == cross) {
          symbol[total].textContent = "x";
          symbol[total].classList.add("blue");
        }
      }
    }
  }

  function return_game_board_record() {
    for (var i = 0; i < 5; i++) {
      for (var j = 0; j < 5; j++) {
        game_board_return[i][j] = game_board[i][j];
      }
    }
  }

  // resetのclickイベント
  reset_button.addEventListener("click", function () {
    click_count = 0;
    return_count = no_return;
    Winning_judgment = lose;
    for (var i = 0; i < 5; i++) {
      for (var j = 0; j < 5; j++) {
        game_board[i][j] = 0;
        game_board_return[i][j] = 0;
        symbol[i * 5 + j].textContent = "";
        frame[i * 5 + j].classList.remove("grey");
      }
    }
    turn.textContent = "turn：";
    reset_button.classList.add("hidden");
    return_botton.classList.remove("hidden");
    turn_text.classList.remove("red");
    turn_text.classList.remove("blue");

    first_player_decision();
    game_board_indication();
  });

  // 盤面の変更
  function game_board_change(line, row) {
    if (game_board[line][row] == 0 && Winning_judgment == lose) {
      // 盤面の記憶
      return_game_board_record();

      game_board[line][row] = now_player;
      click_count += 1;

      // 勝利・引き分け判定
      if (click_count > 6) {
        winner_judge();

        draw_judge();
      }

      // playerの変更
      if (Winning_judgment == lose && click_count != max_click) {
        player_change();
        return_count = ok_return;
      }

      // web場に反映
      game_board_indication();
    }
  }

  function game_board_indication() {
    for (var i = 0; i < 5; i++) {
      for (var j = 0; j < 5; j++) {
        let total = i * 5 + j;
        symbol_color_reset(total);
        if (game_board[i][j] == circle) {
          symbol[total].textContent = "o";
          symbol[total].classList.add("red");
        } else if (game_board[i][j] == cross) {
          symbol[total].textContent = "x";
          symbol[total].classList.add("blue");
        }
      }
    }
  }

  function symbol_color_reset(total) {
    symbol[total].classList.remove("red");
    symbol[total].classList.remove("blue");
  }

  function winner_judge() {
    for (var i = 0; i < winner_judge_coordinate.length; i++) {
      var winner_count = [];
      for (var j = 0; j < winner_judge_coordinate[i].length; j++) {
        var x = Math.floor(winner_judge_coordinate[i][j] / 5);
        var y = winner_judge_coordinate[i][j] % 5;
        winner_count.push([x, y]);
      }

      if (
        game_board[winner_count[0][0]][winner_count[0][1]] == now_player &&
        game_board[winner_count[1][0]][winner_count[1][1]] == now_player &&
        game_board[winner_count[2][0]][winner_count[2][1]] == now_player &&
        game_board[winner_count[3][0]][winner_count[3][1]] == now_player
      ) {
        Winning_judgment = win;
        frame[winner_count[0][0] * 5 + winner_count[0][1]].classList.add(
          "grey",
        );
        frame[winner_count[1][0] * 5 + winner_count[1][1]].classList.add(
          "grey",
        );
        frame[winner_count[2][0] * 5 + winner_count[2][1]].classList.add(
          "grey",
        );
        frame[winner_count[3][0] * 5 + winner_count[3][1]].classList.add(
          "grey",
        );
      }
    }
    if (Winning_judgment == win) {
      winner_text_indication();
    }
  }

  function winner_text_indication() {
    setTimeout(function () {
      turn.textContent = "Win：";
      reset_button.classList.toggle("hidden");
      return_botton.classList.toggle("hidden");
    }, 500);
  }

  function draw_judge() {
    if (Winning_judgment == lose && click_count == max_click) {
      turn.textContent = "Draw";
      turn_text.textContent = "";
      reset_button.classList.toggle("hidden");
      return_botton.classList.toggle("hidden");
    }
  }

  function player_change() {
    if (now_player == circle) {
      now_player = cross;
      turn_text_change();
    } else if (now_player == cross) {
      now_player = circle;
      turn_text_change();
    }
  }
</script>
